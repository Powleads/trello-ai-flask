#!/usr/bin/env python3
"""
Core Test - WhatsApp + OpenAI Only

Test the essential functionality without any Trello dependencies.
"""

import asyncio
import sys
import os
from pathlib import Path

# Add src to path
sys.path.insert(0, 'src')

from dotenv import load_dotenv
load_dotenv()

def simple_test():
    """Simple test without complex imports."""
    print("Meeting Automation Tool - Core Test")
    print("==================================")
    
    # Test 1: Check API keys
    print("\\n1. Checking API Keys...")
    
    whatsapp_instance = os.getenv('GREEN_API_INSTANCE_ID')
    whatsapp_token = os.getenv('GREEN_API_TOKEN')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    if whatsapp_instance and whatsapp_token:
        print("   SUCCESS: WhatsApp credentials found")
    else:
        print("   ERROR: WhatsApp credentials missing")
        return
    
    if openai_key:
        print("   SUCCESS: OpenAI API key found")
    else:
        print("   ERROR: OpenAI API key missing")
        return
    
    # Test 2: Basic WhatsApp connection
    print("\\n2. Testing WhatsApp connection...")
    try:
        import requests
        
        url = f"https://api.green-api.com/waInstance{whatsapp_instance}/getStateInstance/{whatsapp_token}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"   SUCCESS WhatsApp: {data.get('stateInstance', 'Connected')}")
        else:
            print(f"   ERROR WhatsApp failed: {response.status_code}")
            return
    except Exception as e:
        print(f"   ERROR WhatsApp: {e}")
        return
    
    # Test 3: Basic OpenAI connection
    print("\\n3. Testing OpenAI connection...")
    try:
        import openai
        
        client = openai.OpenAI(api_key=openai_key)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Say 'test successful'"}],
            max_tokens=10
        )
        
        result = response.choices[0].message.content
        print(f"   SUCCESS OpenAI: {result}")
        
    except Exception as e:
        print(f"   ERROR OpenAI: {e}")
        return
    
    # Test 4: Process sample transcript
    print("\\n4. Processing sample transcript...")
    
    sample_file = "examples/sample_transcript_with_trello.txt"
    if not Path(sample_file).exists():
        print(f"   ERROR: Sample file not found: {sample_file}")
        return
    
    try:
        # Read transcript
        with open(sample_file, 'r', encoding='utf-8') as f:
            transcript = f.read()
        
        print(f"   SUCCESS: Loaded transcript ({len(transcript)} characters)")
        
        # Generate summary
        summary_prompt = f"""
        Analyze this meeting transcript and provide a brief summary including:
        1. Main topics discussed
        2. Key decisions made
        3. Important action items
        
        Transcript:
        {transcript[:1000]}...
        
        Summary:
        """
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a meeting analyst. Provide clear, concise summaries."},
                {"role": "user", "content": summary_prompt}
            ],
            max_tokens=300,
            temperature=0.3
        )
        
        summary = response.choices[0].message.content
        print("   SUCCESS: Generated AI summary")
        
        # Send WhatsApp message
        chat_id = os.getenv('WHATSAPP_DEFAULT_CHAT')
        if chat_id:
            message = f"ðŸ¤– Meeting Summary\\n\\n{summary}\\n\\n*Generated by Meeting Automation Tool*"
            
            send_url = f"https://api.green-api.com/waInstance{whatsapp_instance}/sendMessage/{whatsapp_token}"
            send_data = {
                "chatId": chat_id,
                "message": message
            }
            
            send_response = requests.post(send_url, json=send_data, timeout=10)
            
            if send_response.status_code == 200:
                print("   SUCCESS: WhatsApp message sent successfully!")
            else:
                print(f"   ERROR: WhatsApp send failed: {send_response.status_code}")
        else:
            print("   WARNING: No WhatsApp chat ID configured")
        
        # Display summary
        print("\\n" + "="*50)
        print("GENERATED SUMMARY:")
        print("="*50)
        print(summary)
        print("="*50)
        
        print("\\nCORE TEST SUCCESSFUL!")
        print("\\nWhat's working:")
        print("   - AI-powered meeting summaries")
        print("   - WhatsApp message sending")
        print("   - Transcript processing")
        print("\\nCheck your WhatsApp group for the summary!")
        
    except Exception as e:
        print(f"   ERROR Processing: {e}")

if __name__ == "__main__":
    simple_test()