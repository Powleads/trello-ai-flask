#!/usr/bin/env python3
"""
Speaker Analysis and Meeting Insights Module
Analyzes meeting transcripts for speaking patterns, engagement, and improvement suggestions
"""

import os
import re
import json
from typing import Dict, List, Tuple, Optional
from collections import defaultdict
from datetime import datetime
import requests
from dotenv import load_dotenv

load_dotenv()

class SpeakerAnalyzer:
    """Analyzes meeting transcripts for speaker patterns and insights."""
    
    def __init__(self):
        self.openai_api_key = os.environ.get('OPENAI_API_KEY')
        
    def extract_speakers_and_content(self, transcript: str) -> Dict[str, Dict]:
        """Extract speakers and their contributions from transcript."""
        speakers = defaultdict(lambda: {
            'lines': [],
            'word_count': 0,
            'speaking_time_estimate': 0,
            'topics_mentioned': [],
            'questions_asked': 0,
            'action_items_given': 0,
            'interruptions': 0,
            'tone_indicators': []
        })
        
        lines = transcript.split('\\n')\n        current_speaker = None\n        \n        for line in lines:\n            line = line.strip()\n            if not line:\n                continue\n            \n            # Look for speaker patterns: \"Name:\" or \"Name -\"\n            speaker_match = re.match(r'^([A-Za-z][A-Za-z\\s]+?)\\s*[-:]\\s*(.+)$', line)\n            \n            if speaker_match:\n                speaker_name = speaker_match.group(1).strip().title()\n                spoken_text = speaker_match.group(2).strip()\n                current_speaker = speaker_name\n                \n                # Filter out common non-speaker patterns\n                if speaker_name.lower() in ['meeting', 'call', 'video', 'audio', 'transcript', 'recording']:\n                    continue\n                \n                speakers[speaker_name]['lines'].append(spoken_text)\n                speakers[speaker_name]['word_count'] += len(spoken_text.split())\n                \n                # Estimate speaking time (rough: 150 words per minute)\n                speakers[speaker_name]['speaking_time_estimate'] = speakers[speaker_name]['word_count'] / 150\n                \n                # Analyze content\n                self._analyze_speaking_content(speakers[speaker_name], spoken_text)\n                \n            elif current_speaker and line:\n                # Continuation of previous speaker\n                speakers[current_speaker]['lines'].append(line)\n                speakers[current_speaker]['word_count'] += len(line.split())\n                speakers[current_speaker]['speaking_time_estimate'] = speakers[current_speaker]['word_count'] / 150\n                self._analyze_speaking_content(speakers[current_speaker], line)\n        \n        return dict(speakers)\n    \n    def _analyze_speaking_content(self, speaker_data: Dict, text: str):\n        \"\"\"Analyze the content of what a speaker said.\"\"\"\n        text_lower = text.lower()\n        \n        # Count questions\n        speaker_data['questions_asked'] += text.count('?')\n        \n        # Detect action items\n        action_patterns = ['will do', 'i\\'ll', 'let me', 'i can', 'i\\'ll take', 'i\\'ll handle', 'next step']\n        for pattern in action_patterns:\n            if pattern in text_lower:\n                speaker_data['action_items_given'] += 1\n                break\n        \n        # Detect tone indicators\n        positive_indicators = ['great', 'excellent', 'perfect', 'good', 'thanks', 'appreciate']\n        negative_indicators = ['issue', 'problem', 'concern', 'difficult', 'challenge', 'stuck']\n        uncertainty_indicators = ['maybe', 'perhaps', 'not sure', 'think', 'might', 'possibly']\n        \n        for indicator in positive_indicators:\n            if indicator in text_lower:\n                speaker_data['tone_indicators'].append('positive')\n                break\n        \n        for indicator in negative_indicators:\n            if indicator in text_lower:\n                speaker_data['tone_indicators'].append('negative')\n                break\n                \n        for indicator in uncertainty_indicators:\n            if indicator in text_lower:\n                speaker_data['tone_indicators'].append('uncertain')\n                break\n    \n    def calculate_engagement_metrics(self, speakers: Dict[str, Dict]) -> Dict:\n        \"\"\"Calculate engagement and participation metrics.\"\"\"\n        total_words = sum(data['word_count'] for data in speakers.values())\n        total_time = sum(data['speaking_time_estimate'] for data in speakers.values())\n        \n        metrics = {\n            'total_speakers': len(speakers),\n            'total_words': total_words,\n            'estimated_meeting_duration': max(total_time, 5),  # Minimum 5 minutes\n            'speaking_distribution': {},\n            'engagement_scores': {},\n            'participation_balance': 'balanced'\n        }\n        \n        # Calculate speaking distribution\n        for name, data in speakers.items():\n            if total_words > 0:\n                percentage = (data['word_count'] / total_words) * 100\n                metrics['speaking_distribution'][name] = {\n                    'percentage': round(percentage, 1),\n                    'word_count': data['word_count'],\n                    'estimated_minutes': round(data['speaking_time_estimate'], 1)\n                }\n                \n                # Calculate engagement score\n                engagement_score = self._calculate_engagement_score(data, percentage)\n                metrics['engagement_scores'][name] = engagement_score\n        \n        # Determine participation balance\n        percentages = [dist['percentage'] for dist in metrics['speaking_distribution'].values()]\n        if percentages:\n            max_percentage = max(percentages)\n            min_percentage = min(percentages)\n            \n            if max_percentage > 60:\n                metrics['participation_balance'] = 'dominated'\n            elif max_percentage - min_percentage > 40:\n                metrics['participation_balance'] = 'unbalanced'\n            else:\n                metrics['participation_balance'] = 'balanced'\n        \n        return metrics\n    \n    def _calculate_engagement_score(self, speaker_data: Dict, speaking_percentage: float) -> Dict:\n        \"\"\"Calculate engagement score for a speaker.\"\"\"\n        score = 50  # Base score\n        factors = []\n        \n        # Speaking time factor (optimal around 20-40% for 2-3 people, less for larger groups)\n        if 15 <= speaking_percentage <= 45:\n            score += 20\n            factors.append('Good speaking balance')\n        elif speaking_percentage > 60:\n            score -= 15\n            factors.append('May be dominating conversation')\n        elif speaking_percentage < 10:\n            score -= 10\n            factors.append('Limited participation')\n        \n        # Questions factor\n        if speaker_data['questions_asked'] > 0:\n            score += min(speaker_data['questions_asked'] * 5, 15)\n            factors.append(f\"Asked {speaker_data['questions_asked']} questions\")\n        \n        # Action items factor\n        if speaker_data['action_items_given'] > 0:\n            score += min(speaker_data['action_items_given'] * 8, 20)\n            factors.append(f\"Committed to {speaker_data['action_items_given']} action items\")\n        \n        # Tone analysis\n        positive_count = speaker_data['tone_indicators'].count('positive')\n        negative_count = speaker_data['tone_indicators'].count('negative')\n        \n        if positive_count > negative_count:\n            score += 10\n            factors.append('Positive tone')\n        elif negative_count > positive_count * 2:\n            score -= 5\n            factors.append('Frequent concerns raised')\n        \n        return {\n            'score': max(0, min(100, score)),\n            'level': 'High' if score >= 80 else 'Medium' if score >= 60 else 'Low',\n            'factors': factors\n        }\n    \n    def generate_improvement_suggestions(self, speakers: Dict[str, Dict], metrics: Dict) -> Dict[str, List[str]]:\n        \"\"\"Generate personalized improvement suggestions for each speaker.\"\"\"\n        suggestions = {}\n        \n        for name, data in speakers.items():\n            speaker_suggestions = []\n            \n            speaking_percentage = metrics['speaking_distribution'][name]['percentage']\n            engagement = metrics['engagement_scores'][name]\n            \n            # Speaking time suggestions\n            if speaking_percentage > 50:\n                speaker_suggestions.append(\n                    \"Consider allowing more space for others to contribute. Try asking open-ended questions to encourage participation.\"\n                )\n            elif speaking_percentage < 10:\n                speaker_suggestions.append(\n                    \"Try to participate more actively in discussions. Your insights and perspectives are valuable to the team.\"\n                )\n            \n            # Question asking\n            if data['questions_asked'] == 0 and speaking_percentage > 20:\n                speaker_suggestions.append(\n                    \"Consider asking more questions to foster discussion and ensure understanding across the team.\"\n                )\n            \n            # Action items\n            if data['action_items_given'] == 0 and speaking_percentage > 30:\n                speaker_suggestions.append(\n                    \"Look for opportunities to take ownership of action items and next steps discussed in the meeting.\"\n                )\n            \n            # Tone and communication style\n            positive_count = data['tone_indicators'].count('positive')\n            negative_count = data['tone_indicators'].count('negative')\n            uncertain_count = data['tone_indicators'].count('uncertain')\n            \n            if negative_count > positive_count:\n                speaker_suggestions.append(\n                    \"While it's important to raise concerns, try to also suggest solutions or positive alternatives when possible.\"\n                )\n            \n            if uncertain_count > 3:\n                speaker_suggestions.append(\n                    \"Consider preparing key points before meetings to communicate with more confidence and clarity.\"\n                )\n            \n            # Engagement-based suggestions\n            if engagement['score'] < 60:\n                speaker_suggestions.append(\n                    \"Increase engagement by asking follow-up questions, providing specific examples, and actively listening to others.\"\n                )\n            \n            suggestions[name] = speaker_suggestions\n        \n        return suggestions\n    \n    def generate_meeting_insights(self, speakers: Dict[str, Dict], metrics: Dict) -> Dict:\n        \"\"\"Generate overall meeting insights and recommendations.\"\"\"\n        insights = {\n            'meeting_quality': 'Good',\n            'key_observations': [],\n            'recommended_improvements': [],\n            'next_meeting_suggestions': []\n        }\n        \n        # Analyze participation balance\n        if metrics['participation_balance'] == 'dominated':\n            insights['meeting_quality'] = 'Needs Improvement'\n            insights['key_observations'].append(\n                'Meeting was dominated by one or two speakers. Other participants had limited opportunity to contribute.'\n            )\n            insights['recommended_improvements'].append(\n                'Implement structured turn-taking or use a facilitator to ensure balanced participation.'\n            )\n        \n        elif metrics['participation_balance'] == 'unbalanced':\n            insights['key_observations'].append(\n                'Participation was somewhat unbalanced among team members.'\n            )\n            insights['recommended_improvements'].append(\n                'Encourage quieter team members to share their thoughts and perspectives.'\n            )\n        \n        # Analyze engagement levels\n        avg_engagement = sum(score['score'] for score in metrics['engagement_scores'].values()) / len(metrics['engagement_scores'])\n        \n        if avg_engagement < 60:\n            insights['meeting_quality'] = 'Needs Improvement'\n            insights['key_observations'].append(\n                'Overall engagement levels were lower than optimal.'\n            )\n            insights['recommended_improvements'].append(\n                'Consider using more interactive formats, shorter segments, or visual aids to increase engagement.'\n            )\n        \n        # Meeting duration analysis\n        if metrics['estimated_meeting_duration'] > 60:\n            insights['key_observations'].append(\n                'Meeting was quite long, which may have affected attention and engagement.'\n            )\n            insights['next_meeting_suggestions'].append(\n                'Consider breaking longer discussions into multiple shorter meetings or using time-boxed agenda items.'\n            )\n        \n        # Question and interaction analysis\n        total_questions = sum(data['questions_asked'] for data in speakers.values())\n        if total_questions < len(speakers):\n            insights['recommended_improvements'].append(\n                'Encourage more questions and clarifications to ensure understanding and engagement.'\n            )\n        \n        # Action items analysis\n        total_action_items = sum(data['action_items_given'] for data in speakers.values())\n        if total_action_items == 0:\n            insights['recommended_improvements'].append(\n                'Ensure meetings conclude with clear action items and ownership assignments.'\n            )\n        \n        return insights\n    \n    def analyze_transcript(self, transcript: str) -> Dict:\n        \"\"\"Main analysis function that processes a transcript and returns comprehensive insights.\"\"\"\n        try:\n            # Extract speakers and their content\n            speakers = self.extract_speakers_and_content(transcript)\n            \n            if not speakers:\n                return {\n                    'success': False,\n                    'error': 'No speakers detected in transcript. Please ensure the transcript includes speaker names followed by colons or dashes.'\n                }\n            \n            # Calculate metrics\n            metrics = self.calculate_engagement_metrics(speakers)\n            \n            # Generate suggestions\n            individual_suggestions = self.generate_improvement_suggestions(speakers, metrics)\n            \n            # Generate meeting insights\n            meeting_insights = self.generate_meeting_insights(speakers, metrics)\n            \n            return {\n                'success': True,\n                'speakers': speakers,\n                'metrics': metrics,\n                'individual_suggestions': individual_suggestions,\n                'meeting_insights': meeting_insights,\n                'analysis_timestamp': datetime.now().isoformat()\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'Analysis failed: {str(e)}'\n            }\n    \n    def format_suggestions_for_whatsapp(self, analysis: Dict, speaker_name: str) -> str:\n        \"\"\"Format personalized suggestions for WhatsApp delivery.\"\"\"\n        if not analysis.get('success') or speaker_name not in analysis.get('individual_suggestions', {}):\n            return None\n        \n        suggestions = analysis['individual_suggestions'][speaker_name]\n        speaker_data = analysis['speakers'][speaker_name]\n        engagement = analysis['metrics']['engagement_scores'][speaker_name]\n        speaking_dist = analysis['metrics']['speaking_distribution'][speaker_name]\n        \n        if not suggestions:\n            # Create positive message if no improvements needed\n            message = f\"\"\"🎯 **Meeting Performance Feedback**\n\nHi {speaker_name}! Great job in today's meeting.\n\n📊 **Your Participation:**\n• Speaking time: {speaking_dist['estimated_minutes']} minutes ({speaking_dist['percentage']}%)\n• Engagement score: {engagement['score']}/100 ({engagement['level']})\n• Questions asked: {speaker_data['questions_asked']}\n• Action items taken: {speaker_data['action_items_given']}\n\n✅ **Strengths:**\n• {', '.join(engagement['factors']) if engagement['factors'] else 'Active participation'}\n\nKeep up the excellent work!\n\n*JGV EEsystems AI Meeting Insights*\"\"\"\n        else:\n            message = f\"\"\"🎯 **Meeting Performance Feedback**\n\nHi {speaker_name}! Here's your personalized feedback from today's meeting.\n\n📊 **Your Participation:**\n• Speaking time: {speaking_dist['estimated_minutes']} minutes ({speaking_dist['percentage']}%)\n• Engagement score: {engagement['score']}/100 ({engagement['level']})\n• Questions asked: {speaker_data['questions_asked']}\n• Action items taken: {speaker_data['action_items_given']}\n\n💡 **Suggestions for Next Time:**\n\"\"\"\n            \n            for i, suggestion in enumerate(suggestions, 1):\n                message += f\"\\n{i}. {suggestion}\"\n            \n            message += \"\\n\\n🌟 Remember, these suggestions are meant to help optimize our team meetings. Your participation and input are valued!\"\n            message += \"\\n\\n*JGV EEsystems AI Meeting Insights*\"\n        \n        return message\n\ndef test_speaker_analysis():\n    \"\"\"Test the speaker analysis functionality.\"\"\"\n    sample_transcript = \"\"\"\nJohn: Good morning everyone. Let's start with our updates. Sarah, how's the progress on the WordPress site?\n\nSarah: The WordPress site is going well. I've been working on the main landing page and we should have the initial version ready for review by Friday. I think we can move that card to the review column soon.\n\nMike: Great! What about the task for reaching out to onboarded clients? I know we discussed showing leads to new prospects.\n\nSarah: Yes, I've been working on that too. The reach out task is about 60% complete. I have a list of 15 clients ready to contact and I'm preparing the presentation materials.\n\nJohn: Perfect. Any blockers on the Center Name projects? I know we have a few of those.\n\nMike: Actually yes. For the Vitality Energy Healing project, I'm waiting for approval on the logo design. And for Quantum Healing Room, we need to finalize the color scheme before proceeding.\n\nSarah: I can help with the Quantum Healing Room colors. I have some ideas that might work well with their branding.\n\nJohn: Excellent. Let's make sure we update these cards with our discussion points so the team knows the current status.\n\nMike: Agreed. I'll add comments about the logo approval wait, and Sarah, if you can add your color scheme ideas, that would be great.\n\nJohn: Perfect. Any other items before we wrap up?\n\nSarah: Just one question - do we have a timeline for the client presentation materials?\n\nMike: Good question. I think we should aim for next week. That gives us time to prepare properly.\n\nJohn: Sounds good. Let's meet again on Friday to review everything. Thanks everyone!\n\"\"\"\n    \n    analyzer = SpeakerAnalyzer()\n    result = analyzer.analyze_transcript(sample_transcript)\n    \n    if result['success']:\n        print(\"Speaker Analysis Test Results:\")\n        print(f\"Speakers found: {list(result['speakers'].keys())}\")\n        print(f\"Meeting quality: {result['meeting_insights']['meeting_quality']}\")\n        print(f\"Participation balance: {result['metrics']['participation_balance']}\")\n        \n        for speaker, suggestions in result['individual_suggestions'].items():\n            print(f\"\\n{speaker} suggestions: {len(suggestions)}\")\n            \n        return True\n    else:\n        print(f\"Test failed: {result['error']}\")\n        return False\n\nif __name__ == \"__main__\":\n    if test_speaker_analysis():\n        print(\"Speaker analysis test passed!\")\n    else:\n        print(\"Speaker analysis test failed!\")